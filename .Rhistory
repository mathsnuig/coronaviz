knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE, fig.height=4)
options(htmltools.dir.version = FALSE, scipen = 5)
library(LearnBayes)
install.packages("LearnBayes")
install.packages("TeachBayes")
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE, fig.height=4)
options(htmltools.dir.version = FALSE, scipen = 5)
library(LearnBayes)
#library(TeachBayes)
library(knitr)
library(ggplot2)
library(lattice)
library(shiny)
set.seed(123)
mydata <- data.frame(id=1:38, distance = round(rnorm(38,6532,1000),0))
mysims <- rnorm(10000, mean = post_mean, sd = post_sd)
ui <- fluidPage(
titlePanel("Simulation v Calculation"),
sidebarLayout(
sidebarPanel(
numericInput("nsims", "Number of simulations", min = 10, max = 10000, value = 10)),
mainPanel(plotOutput("distPlot"))))
server <- function(input, output) {
output$distPlot <- renderPlot({
set.seed(123)
# Simulate values from the Gamma posterior
mysims <- rnorm(input$nsims, mean = post_mean, sd = post_sd)
# Calculated
x <- seq(4500, 8500, length=100)
hx <- dnorm(x, mean=post_mean, sd=post_sd)
# Plot the Simulated data v Calculated curve
plot(density(mysims),col = 'red', main = '', xlab = 'theta', ylab = '', lwd = 3, ylim = c(0,1.5), xlim = c(4500,8500))
lines(x, hx, col='blue', lwd=3)
legend("topright", c("Calculated","Simulated"), lty = 1, lwd= 3, col = c('blue','red'))
})}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE, fig.height=4)
options(htmltools.dir.version = FALSE, scipen = 5)
library(LearnBayes)
#library(TeachBayes)
library(knitr)
library(ggplot2)
library(lattice)
library(shiny)
set.seed(123)
mydata <- data.frame(id=1:38, distance = round(rnorm(38,6532,1000),0))
m0 = 7000
s0 = 150
mydata$distance[1:10]
xbar <- mean(mydata$distance)
xbar
sigma <- 1000
se <- sigma/sqrt(38)
se
ggplot(mydata,aes(x=distance))+geom_histogram()
## Calculate shape parameters for beta posterior:
post_mean = (1/(se^2) + 1/(s0^2))^(-1)*(xbar/(se^2) + m0/(s0^2))
post_sd = sqrt((1/(se^2) + 1/(s0^2))^(-1))
df <- data.frame(Distribution = c("Prior","Data","Posterior"),
Mean = c(m0,xbar,post_mean),
SD = c(s0,se,post_sd))
df
x <- seq(4500, 8500, length=100)
priorx <- dnorm(x, mean=m0, sd=s0)
datax  <- dnorm(x, mean=xbar, sd=se)
postx  <- dnorm(x, mean=post_mean, sd=post_sd)
plot(x, priorx, type='l',lwd=3,xlim = c(4500, 8500),ylim=c(0,0.004),col = 'blue', main = '', xlab = 'theta', ylab = '')
lines(x, datax,col='black',lwd=3)
lines(x, postx,col='red',lwd=3)
legend("topleft", c("Prior","Data","Posterior"), lty = 1, lwd= 3, col = c('blue','black','red'))
ui <- fluidPage(
titlePanel("Simulation v Calculation"),
sidebarLayout(
sidebarPanel(
numericInput("nsims", "Number of simulations", min = 10, max = 10000, value = 10)),
mainPanel(plotOutput("distPlot"))))
server <- function(input, output) {
output$distPlot <- renderPlot({
set.seed(123)
# Simulate values from the Gamma posterior
mysims <- rnorm(input$nsims, mean = post_mean, sd = post_sd)
# Calculated
x <- seq(4500, 8500, length=100)
hx <- dnorm(x, mean=post_mean, sd=post_sd)
# Plot the Simulated data v Calculated curve
plot(density(mysims),col = 'red', main = '', xlab = 'theta', ylab = '', lwd = 3, ylim = c(0,1.5), xlim = c(4500,8500))
lines(x, hx, col='blue', lwd=3)
legend("topright", c("Calculated","Simulated"), lty = 1, lwd= 3, col = c('blue','red'))
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Simulation v Calculation"),
sidebarLayout(
sidebarPanel(
numericInput("nsims", "Number of simulations", min = 10, max = 10000, value = 10)),
mainPanel(plotOutput("distPlot"))))
server <- function(input, output) {
output$distPlot <- renderPlot({
set.seed(123)
# Simulate values from the Gamma posterior
mysims <- rnorm(input$nsims, mean = post_mean, sd = post_sd)
# Calculated
x <- seq(4500, 8500, length=100)
hx <- dnorm(x, mean=post_mean, sd=post_sd)
# Plot the Simulated data v Calculated curve
plot(density(mysims),col = 'red', main = '', xlab = 'theta', ylab = '', lwd = 3, ylim = c(0,0.1), xlim = c(4500,8500))
lines(x, hx, col='blue', lwd=3)
legend("topright", c("Calculated","Simulated"), lty = 1, lwd= 3, col = c('blue','red'))
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Simulation v Calculation"),
sidebarLayout(
sidebarPanel(
numericInput("nsims", "Number of simulations", min = 10, max = 10000, value = 10)),
mainPanel(plotOutput("distPlot"))))
server <- function(input, output) {
output$distPlot <- renderPlot({
set.seed(123)
# Simulate values from the Gamma posterior
mysims <- rnorm(input$nsims, mean = post_mean, sd = post_sd)
# Calculated
x <- seq(4500, 8500, length=100)
hx <- dnorm(x, mean=post_mean, sd=post_sd)
# Plot the Simulated data v Calculated curve
plot(density(mysims),col = 'red', main = '', xlab = 'theta', ylab = '', lwd = 3, ylim = c(0,0.01), xlim = c(4500,8500))
lines(x, hx, col='blue', lwd=3)
legend("topright", c("Calculated","Simulated"), lty = 1, lwd= 3, col = c('blue','red'))
})}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Simulation v Calculation"),
sidebarLayout(
sidebarPanel(
numericInput("nsims", "Number of simulations", min = 10, max = 10000, value = 10)),
mainPanel(plotOutput("distPlot"))))
server <- function(input, output) {
output$distPlot <- renderPlot({
set.seed(123)
# Simulate values from the Gamma posterior
mysims <- rnorm(input$nsims, mean = post_mean, sd = post_sd)
# Calculated
x <- seq(4500, 8500, length=100)
hx <- dnorm(x, mean=post_mean, sd=post_sd)
# Plot the Simulated data v Calculated curve
plot(density(mysims),col = 'red', main = '', xlab = 'theta', ylab = '', lwd = 3, ylim = c(0,0.005), xlim = c(4500,8500))
lines(x, hx, col='blue', lwd=3)
legend("topright", c("Calculated","Simulated"), lty = 1, lwd= 3, col = c('blue','red'))
})}
shinyApp(ui = ui, server = server)
?img
?knitr::include_graphics
install.packages("remotes")
remotes::install_github("bayesball/TeachBayes")
library(googlesheets)
gs_auth(new_user = FALSE)
library(googlesheets4)
install.packages("googlesheets4")
library(googlesheets4)
gs_auth(new_user = FALSE)
# library(googlesheets4)
# gs_auth(new_user = FALSE)
# for_gs <- gs_title("ST417 Probability of rain")
# st417_data <- gs_read(for_gs)
st417_data <- read.csv('data/st417rain.csv')
View(st417_data)
View(st417_data)
# library(googlesheets4)
# gs_auth(new_user = FALSE)
# for_gs <- gs_title("ST417 Probability of rain")
# st417_data <- gs_read(for_gs)
st417_data <- read.csv('data/st417rain.csv')
names(st417_data) <- c('date', 'rain', 'rain_cloudy')
View(st417_data)
library(ggplot2)
ggplot(st417_data, aes(rain)) +
geom_density(fill='green', alpha=0.4) +
labs(x="Probability of rain")
ggplot(st417_data, aes(rain)) +
geom_density(fill='green', alpha=0.4) +
geom_density(aes(rain_cloudy),fill='blue',alpha=0.4) +
labs(x="Probability of rain")
?TeachBayes::prob_plot
install.packages("ggExtra")
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, echo = TRUE, fig.height=4)
options(htmltools.dir.version = FALSE, scipen = 5)
library(knitr)
library(googlesheets4)
library(tidyverse)
# read data from a Google sheet called ST1100 Class survey
## authorise my google account
gs4_auth()
# make this a data frame - a nice R object to work with
st1100_data <- read_sheet("https://docs.google.com/spreadsheets/d/1e1Sq50y5UljkcgOYWFQAMvfwgt_2Fbd9cav3tq3mVdw/edit#gid=1224017628")
dim(st1100_data)
# use last year's data if less than 30 people fill out
if(dim(st1100_data)[1] < 30){
st1100_data <- read.csv("data/ST1100 Class survey 2019.csv")}
names(st1100_data)[1:10]
names(st1100_data) <- c("time","type","oncampus","smoke","rent","social",
"drink","might","probably","definitely",
"random","study","exercise","exam","circles")
head(st1100_data)
summary(st1100_data)
st1100_data %>% select(type) %>% table()
st1100_data %>% select(type) %>% table() %>% prop.table()
st1100_data %>% select(type) %>% table() %>% prop.table()*100
st1100_data %>%
ggplot(aes(type,fill=type))+
geom_bar()+ylab("number")
st1100_data %>% na.omit() %>% ggplot(aes(type,..count../sum(..count..),fill=type))+
geom_bar() + scale_y_continuous(labels=scales::percent) +
ylab("Percent") + theme(axis.text.x = element_text(angle = 45,hjust=1))
st1100_data %>% na.omit() %>% ggplot(aes(smoke,..count../sum(..count..),fill=smoke))+
geom_bar() + scale_y_continuous(labels=scales::percent) +
ylab("Percent")
st1100_data %>% na.omit() %>%
ggplot(aes(type,fill=smoke))+ geom_bar() + ylab("tally") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
st1100_data %>% na.omit() %>% ggplot(aes(type))+
geom_bar(aes(fill=smoke), position="fill") + ylab("Proportion") +
theme(axis.text.x = element_text(angle = 45,hjust=1))
st1100_data %>% na.omit() %>%
ggplot(aes(social,fill=social))+ geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
st1100_data %>% na.omit() %>%
mutate(social_tidy = tolower(social)) %>% # change social media to lowercase
ggplot(aes(social_tidy,fill=social_tidy)) + geom_bar() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),legend.position = "none")
knitr::include_graphics("/Users/andrew/Google Drive File Stream/My Drive/Teaching/NUIG/ST1100/20-21/Lectures/figures/mean.png")
knitr::include_graphics("/Users/andrew/Google Drive File Stream/My Drive/Teaching/NUIG/ST1100/20-21/Lectures/figures/median.png")
st1100_data %>% select(rent) %>% summary()
mean(c(1,2,3,4,5))
median(c(1,2,3,4,5))
mean(c(1,2,3,4,50))
median(c(1,2,3,4,50))
st1100_data %>%
filter(rent > 0) %>%
select(rent) %>%
summary()
st1100_data %>% filter(rent > 0 & rent < 400) %>%
select(rent) %>%
summary()
quantile(c(1,2,3,4,5,6,7,8,9),probs=c(0.25,0.75))
knitr::include_graphics("/Users/andrew/Google Drive File Stream/My Drive/Teaching/NUIG/ST1100/20-21/Lectures/figures/sd.png")
sd(c(1,2,3,4,5))
IQR(c(1,2,3,4,5))
sd(c(1,2,3,4,50))
IQR(c(1,2,3,4,50))
st1100_data %>% na.omit() %>%
summarise(min = min(oncampus),
max = max(oncampus),
mean = mean(oncampus),
sd = sd(oncampus),
median = median(oncampus),
iqr=IQR(oncampus))
st1100_data %>%
ggplot(aes(oncampus)) + geom_histogram()
st1100_data %>%
ggplot(aes(oncampus)) +
geom_boxplot()
st1100_data %>% filter(rent >0 & rent < 400)
ggplot(aes(rent)) + geom_boxplot()
st1100_data %>% filter(rent >0 & rent < 400) %>%
ggplot(aes(rent)) + geom_boxplot()
mean(c(9,13,13,19,8))
v=c(60,	55,	75,	60,	86,	96,	50,	108)
mean(v)
median(v)
s = c(25000,	25000,	33500,	35000	,36500,	41200,	112000)
range(s)
112-25
sd(s)
var(s)
IQR(s)
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE, fig.height=4)
options(htmltools.dir.version = FALSE, scipen = 5)
library(LearnBayes)
library(TeachBayes)
library(knitr)
library(ggplot2)
library(lattice)
library(shiny)
set.seed(123)
mydata <- data.frame(id=1:38, distance = round(rnorm(38,10532,1000),0))
m0 = 12000
s0 = 150
mydata$distance[1:10]
xbar <- mean(mydata$distance)
xbar
sigma <- 1000
se <- sigma/sqrt(38)
se
ggplot(mydata,aes(x=distance))+geom_histogram()
## Calculate shape parameters for beta posterior:
post_mean = (1/(se^2) + 1/(s0^2))^(-1)*(xbar/(se^2) + m0/(s0^2))
post_sd = sqrt((1/(se^2) + 1/(s0^2))^(-1))
df <- data.frame(Distribution = c("Prior","Data","Posterior"),
Mean = c(m0,xbar,post_mean),
SD = c(s0,se,post_sd))
df
x <- seq(9500, 12500, length=1000)
priorx <- dnorm(x, mean=m0, sd=s0)
datax  <- dnorm(x, mean=xbar, sd=se)
postx  <- dnorm(x, mean=post_mean, sd=post_sd)
plot(x, priorx, type='l',lwd=3,xlim = c(9500, 12500),ylim=c(0,0.004),
col = 'blue', main = '', xlab = 'theta', ylab = '')
lines(x, datax,col='black',lwd=3)
lines(x, postx,col='red',lwd=3)
legend("topleft", c("Prior","Data","Posterior"), lty = 1, lwd= 3,
col = c('blue','black','red'))
x <- seq(10000, 12500, length=1000)
priorx <- dnorm(x, mean=m0, sd=s0)
datax  <- dnorm(x, mean=xbar, sd=se)
postx  <- dnorm(x, mean=post_mean, sd=post_sd)
plot(x, priorx, type='l',lwd=3,xlim = c(10000, 12500),ylim=c(0,0.004),
col = 'blue', main = '', xlab = 'theta', ylab = '')
lines(x, datax,col='black',lwd=3)
lines(x, postx,col='red',lwd=3)
legend("topleft", c("Prior","Data","Posterior"), lty = 1, lwd= 3,
col = c('blue','black','red'))
x <- seq(10000, 12500, length=100)
priorx <- dnorm(x, mean=m0, sd=s0)
datax  <- dnorm(x, mean=xbar, sd=se)
postx  <- dnorm(x, mean=post_mean, sd=post_sd)
plot(x, priorx, type='l',lwd=3,xlim = c(10000, 12500),ylim=c(0,0.004),col = 'blue', main = '', xlab = 'theta', ylab = '')
lines(x, datax,col='black',lwd=3)
lines(x, postx,col='red',lwd=3)
legend("topleft", c("Prior","Data","Posterior"), lty = 1, lwd= 3, col = c('blue','black','red'))
ui <- fluidPage(
titlePanel("Simulation v Calculation"),
sidebarLayout(
sidebarPanel(
numericInput("nsims", "Number of simulations", min = 10, max = 10000, value = 10)),
mainPanel(plotOutput("distPlot"))))
server <- function(input, output) {
output$distPlot <- renderPlot({
set.seed(123)
# Simulate values from the Gamma posterior
mysims <- rnorm(input$nsims, mean = post_mean, sd = post_sd)
# Calculated
x <- seq(10000, 12500, length=100)
hx <- dnorm(x, mean=post_mean, sd=post_sd)
# Plot the Simulated data v Calculated curve
plot(density(mysims),col = 'red', main = '', xlab = 'theta', ylab = '', lwd = 3, ylim = c(0,0.005), xlim = c(10000, 12500))
lines(x, hx, col='blue', lwd=3)
legend("topright", c("Calculated","Simulated"), lty = 1, lwd= 3, col = c('blue','red'))
})}
shinyApp(ui = ui, server = server)
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz')
