fitJOINT
summary(fitJOINT)
plot(fitJOINT)
survfitJM(fitJOINT)
library(JM)
library(JMbayes)
## Not run:
# linear mixed model fit (random intercepts)
fitLME <- lme(log(serBilir) ~ drug * year, random = ~ 1 | id, data = pbc2)
# survival regression fit
fitSURV <- survreg(Surv(years, status2) ~ drug, data = pbc2.id, x = TRUE)
# joint model fit, under the (default) Weibull model
fitJOINT <- jointModel(fitLME, fitSURV, timeVar = "year")
fitJOINT
summary(fitJOINT)
plot(fitJOINT)
# joint model fit, under the (default) Weibull model
fitJOINT <- jointModel(fitLME, fitSURV, timeVar = "year")
fitJOINT
summary(fitJOINT)
survfitJM(fitJOINT)
?survfitJM
pred <- survfitJM(fitJOINT, newdata = pbc2[pbc2$id == "2", ])
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
library(readxl)
data(dhb_cars)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
agelevels = c("<1", "1 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 29", "30 to 39", "40 to 49", "50 to 59",
"60 to 69", "70+", "unknown")
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzdate = tolower(format(as.Date(Sys.time()), "%d_%b_%Y"))
nzurl = paste("https://www.health.govt.nz/system/files/documents/pages/covidcase_list_", nzdate, "_for_web_-_updated.xlsx", sep = "")
nzfn = rev(strsplit(nzurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(nzurl, authenticate(":", ":", type="ntlm"), write_disk(nzfn, overwrite = TRUE))
# extract CONFIRMED NZ covid-19 case Excel datafile from MoH website
confirmed = data.frame(read_excel(nzfn, sheet = "Confirmed", skip = 3))
confirmed = confirmed %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age.group[confirmed$Age.group == "Unknown"] = "unknown"
confirmed$Age.group = factor(confirmed$Age.group, levels = agelevels)
confirmed$International.travel[is.na(confirmed$International.travel)] = "unknown"
confirmed$International.travel = factor(confirmed$International.travel)
confirmed$Sex[is.na(confirmed$Sex)] = "unknown"
confirmed$Sex = factor(tolower(confirmed$Sex))
# extract PROBABLE NZ covid-19 case Excel datafile from MoH website
probable = data.frame(read_excel(nzfn, sheet = "Probable", skip = 3))
probable = probable %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
probable$DHB = factor(probable$DHB, levels = dhbnames) # will give warning and NA entry if not valid
probable$Age.group[probable$Age.group == "Unknown"] = "unknown"
probable$Age.group = factor(probable$Age.group, levels = agelevels)
probable$International.travel[is.na(probable$International.travel)] = "unknown"
probable$International.travel = factor(probable$International.travel)
probable$Sex[is.na(probable$Sex)] = "unknown"
probable$Sex = factor(tolower(probable$Sex))
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
todaysdate = format(as.Date(Sys.time())-1, "%Y-%m-%d") # NZ is always ahead!
ecdpcurl = paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", todaysdate, ".xlsx", sep = "")
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type = "ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read_excel(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$dateRep = as.Date(ecdpcdata$dateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$countriesAndTerritories = gsub("_",  " ", ecdpcdata$countriesAndTerritories)
ecdpcdata$countriesAndTerritories = factor(ecdpcdata$countriesAndTerritories)
ecdpcdata$geoId = factor(ecdpcdata$geoId)
ecdpcdata$countryterritoryCode = factor(ecdpcdata$countryterritoryCode)
nzdata = ecdpcdata[ecdpcdata$countriesAndTerritories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
if (nzdata$TotalCases[1] != (dim(confirmed)[1] + dim(probable)[1])) {
warning(paste("MoH says", dim(confirmed)[1] + dim(probable)[1], "confirmed and probable cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
# Seems that ECDPC is now back to showing only confirmed cases for NZ
######
#
# Access official NZ Ministry of Health data (*** daily summaries ***)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
dailytable = alltables[[1]]
#DHBtable = alltables[[2]] # not useful as includes "probable" cases
nconfirmed = as.numeric(dailytable[1, 2])
newconfirmed = as.numeric(dailytable[1, 3])
ndeaths = as.numeric(dailytable[6, 2])
# Gives error if new count is not consistent with old data
if (nconfirmed != dim(confirmed)[1]) {
stop("Confirmed case count does not equal saily summary table")
}
# Keep ongoing record of summary data
write.csv(dailytable, paste("MoH_",nzdate,".csv", sep = ""), quote = FALSE, row.names = FALSE)
#######
#
# Adjust to same format as for Shiny app
######## MANUAL DATA CORRECTION (2 patients recorded as 28/3/20, actually recorded in official figures as 27/03/20)
confirmed$Date.of.report[1:7] = as.Date("30/03/2020", format = "%d/%m/%Y")
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Date.of.report, Sex, DHB) %>%
summarise(ncase = length(Date.of.report)) %>%
mutate(country = "new zealand", ndeath = 0) %>%
select(date = Date.of.report, ncase, ndeath, gender = Sex, area = DHB, country) %>%
ungroup()
# Deaths need manual input
nzshinydata = nzshinydata %>% add_row(date = "2020-03-28", ncase = 0, ndeath = 1, gender = "female",
area = "West Coast", country = "new zealand") %>%
group_by(date, gender, area, country) %>%
summarise(ncase = sum(ncase), ndeath = sum(ndeath)) %>%
select(date, ncase, ndeath, gender, area, country) %>%
ungroup() %>% arrange(date, area, gender)
nzshinydata = data.frame(nzshinydata)
######
#
# Update Shiny datafile
shinydata = read.csv("coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
# # Save old datafile and create updated one
# file.rename("coronaviz-master (7)/coronaviz-master/data/corona_island_nz.csv",
#             "coronaviz-master (7)/coronaviz-master/data/corona_island_nz_old.csv")
write.csv(shinydata1, "coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
# Update Shiny datafile
shinydata = read.csv("covid/coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
# # Save old datafile and create updated one
# file.rename("coronaviz-master (7)/coronaviz-master/data/corona_island_nz.csv",
#             "coronaviz-master (7)/coronaviz-master/data/corona_island_nz_old.csv")
write.csv(shinydata1, "covid/coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
shiny::runApp('covid/coronaviz')
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
library(readxl)
data(dhb_cars)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
agelevels = c("<1", "1 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 29", "30 to 39", "40 to 49", "50 to 59",
"60 to 69", "70+", "unknown")
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzmainurl ="https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-situation/covid-19-current-cases/covid-19-current-cases-details"
webpage = read_html(nzmainurl)
# Get all the links
alllinks = html_nodes(webpage, "a")
alllinks = html_attr(alllinks, "href")
# Find the Excel file (.xlsx)
urlpath = alllinks[which(endsWith(alllinks, "xlsx"))]
# Parse URL and add in file path on website
nzparse = parse_url(nzmainurl)
nzparse$path = urlpath
nzurl = build_url(nzparse)
nzfn = rev(strsplit(nzurl, "/")[[1]])[1]
nzdate = tolower(format(as.Date(Sys.time()), "%d_%b_%Y"))
# Download the dataset from the website to a local temporary file
GET(nzurl, authenticate(":", ":", type="ntlm"), write_disk(nzfn, overwrite = TRUE))
# extract CONFIRMED NZ covid-19 case Excel datafile from MoH website
confirmed = data.frame(read_excel(nzfn, sheet = "Confirmed", skip = 3))
confirmed = confirmed %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age.group[confirmed$Age.group == "Unknown"] = "unknown"
confirmed$Age.group = factor(confirmed$Age.group, levels = agelevels)
confirmed$International.travel[is.na(confirmed$International.travel)] = "unknown"
confirmed$International.travel = factor(confirmed$International.travel)
confirmed$Sex[is.na(confirmed$Sex)] = "unknown"
confirmed$Sex = factor(tolower(confirmed$Sex))
# extract PROBABLE NZ covid-19 case Excel datafile from MoH website
probable = data.frame(read_excel(nzfn, sheet = "Probable", skip = 3))
probable = probable %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
probable$DHB = factor(probable$DHB, levels = dhbnames) # will give warning and NA entry if not valid
probable$Age.group[probable$Age.group == "Unknown"] = "unknown"
probable$Age.group = factor(probable$Age.group, levels = agelevels)
probable$International.travel[is.na(probable$International.travel)] = "unknown"
probable$International.travel = factor(probable$International.travel)
probable$Sex[is.na(probable$Sex)] = "unknown"
probable$Sex = factor(tolower(probable$Sex))
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
todaysdate = format(as.Date(Sys.time())-1, "%Y-%m-%d") # NZ is always ahead!
ecdpcurl = paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", todaysdate, ".xlsx", sep = "")
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type = "ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read_excel(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$dateRep = as.Date(ecdpcdata$dateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$countriesAndTerritories = gsub("_",  " ", ecdpcdata$countriesAndTerritories)
ecdpcdata$countriesAndTerritories = factor(ecdpcdata$countriesAndTerritories)
ecdpcdata$geoId = factor(ecdpcdata$geoId)
ecdpcdata$countryterritoryCode = factor(ecdpcdata$countryterritoryCode)
nzdata = ecdpcdata[ecdpcdata$countriesAndTerritories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
if (nzdata$TotalCases[1] != (dim(confirmed)[1] + dim(probable)[1])) {
warning(paste("MoH says", dim(confirmed)[1] + dim(probable)[1], "confirmed and probable cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
# Seems that ECDPC is now back to showing only confirmed cases for NZ
######
#
# Access official NZ Ministry of Health data (*** daily summaries ***)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
dailytable = alltables[[1]]
#DHBtable = alltables[[2]] # not useful as includes "probable" cases
nconfirmed = as.numeric(dailytable[1, 2])
newconfirmed = as.numeric(dailytable[1, 3])
ndeaths = as.numeric(dailytable[6, 2])
# Gives error if new count is not consistent with old data
if (nconfirmed != dim(confirmed)[1]) {
stop("Confirmed case count does not equal saily summary table")
}
# Keep ongoing record of summary data
write.csv(dailytable, paste("MoH_",nzdate,".csv", sep = ""), quote = FALSE, row.names = FALSE)
#######
#
# Adjust to same format as for Shiny app
######## MANUAL DATA CORRECTION (10 patients recorded as 01/04/20, actually recorded in official figures as 31/03/20)
confirmed$Date.of.report[1:10] = as.Date("31/03/2020", format = "%d/%m/%Y")
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Date.of.report, Sex, DHB) %>%
summarise(ncase = length(Date.of.report)) %>%
mutate(country = "new zealand", ndeath = 0) %>%
select(date = Date.of.report, ncase, ndeath, gender = Sex, area = DHB, country) %>%
ungroup()
# Deaths need manual input
nzshinydata = nzshinydata %>% add_row(date = "2020-03-28", ncase = 0, ndeath = 1, gender = "female",
area = "West Coast", country = "new zealand") %>%
group_by(date, gender, area, country) %>%
summarise(ncase = sum(ncase), ndeath = sum(ndeath)) %>%
select(date, ncase, ndeath, gender, area, country) %>%
ungroup() %>% arrange(date, area, gender)
nzshinydata = data.frame(nzshinydata)
######
#
# Update Shiny datafile
# Update Shiny datafile
shinydata = read.csv("covid/coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
write.csv(shinydata1, "covid/coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
runApp('covid/coronaviz')
library(tidyverse)
library(rvest)
library(httr)
library(spData) # NZ regions
library(DHBins) # NZ DHB regions
library(readxl)
data(dhb_cars)
dhbnames = sort(as.character(dhb_cars$dhb)) # can't find a better official source of NZ DHB names in R
dhbnames[dhbnames == "Hutt"] = "Hutt Valley" # incorrect in library
dhbnames[dhbnames == "Midcentral"] = "MidCentral"  # incorrect in library
agelevels = c("<1", "1 to 4", "5 to 9", "10 to 14", "15 to 19", "20 to 29", "30 to 39", "40 to 49", "50 to 59",
"60 to 69", "70+", "unknown")
######
#
# Access official NZ Ministry of Health data (individual patient level)
nzmainurl ="https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-situation/covid-19-current-cases/covid-19-current-cases-details"
webpage = read_html(nzmainurl)
# Get all the links
alllinks = html_nodes(webpage, "a")
alllinks = html_attr(alllinks, "href")
# Find the Excel file (.xlsx)
urlpath = alllinks[which(endsWith(alllinks, "xlsx"))]
# Parse URL and add in file path on website
nzparse = parse_url(nzmainurl)
nzparse$path = urlpath
nzurl = build_url(nzparse)
nzfn = rev(strsplit(nzurl, "/")[[1]])[1]
nzdate = tolower(format(as.Date(Sys.time()), "%d_%b_%Y"))
# Download the dataset from the website to a local temporary file
GET(nzurl, authenticate(":", ":", type="ntlm"), write_disk(nzfn, overwrite = TRUE))
# extract CONFIRMED NZ covid-19 case Excel datafile from MoH website
confirmed = data.frame(read_excel(nzfn, sheet = "Confirmed", skip = 3))
confirmed = confirmed %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
confirmed$DHB = factor(confirmed$DHB, levels = dhbnames) # will give warning and NA entry if not valid
confirmed$Age.group[confirmed$Age.group == "Unknown"] = "unknown"
confirmed$Age.group = factor(confirmed$Age.group, levels = agelevels)
confirmed$International.travel[is.na(confirmed$International.travel)] = "unknown"
confirmed$International.travel = factor(confirmed$International.travel)
confirmed$Sex[is.na(confirmed$Sex)] = "unknown"
confirmed$Sex = factor(tolower(confirmed$Sex))
# extract PROBABLE NZ covid-19 case Excel datafile from MoH website
probable = data.frame(read_excel(nzfn, sheet = "Probable", skip = 3))
probable = probable %>% select(Date.of.report, Sex, Age.group, DHB, International.travel)
probable$DHB = factor(probable$DHB, levels = dhbnames) # will give warning and NA entry if not valid
probable$Age.group[probable$Age.group == "Unknown"] = "unknown"
probable$Age.group = factor(probable$Age.group, levels = agelevels)
probable$International.travel[is.na(probable$International.travel)] = "unknown"
probable$International.travel = factor(probable$International.travel)
probable$Sex[is.na(probable$Sex)] = "unknown"
probable$Sex = factor(tolower(probable$Sex))
######
#
# Access official ECDPC count data per country
# Load library
# Website and filename for European Centre for Disease Prevention and Control Covid-19 data
todaysdate = format(as.Date(Sys.time())-1, "%Y-%m-%d") # NZ is always ahead!
ecdpcurl = paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-", todaysdate, ".xlsx", sep = "")
ecdpcfn = rev(strsplit(ecdpcurl, "/")[[1]])[1]
# Download the dataset from the website to a local temporary file
GET(ecdpcurl, authenticate(":", ":", type = "ntlm"), write_disk(ecdpcfn, overwrite = TRUE))
# Read dataset
ecdpcdata = read_excel(ecdpcfn)
# Date object
# Have checked that Day/Month/Year is same as DateRep
ecdpcdata$dateRep = as.Date(ecdpcdata$dateRep, format = "%d/%m/%Y")
# Factors and replace "_" with " "
ecdpcdata$countriesAndTerritories = gsub("_",  " ", ecdpcdata$countriesAndTerritories)
ecdpcdata$countriesAndTerritories = factor(ecdpcdata$countriesAndTerritories)
ecdpcdata$geoId = factor(ecdpcdata$geoId)
ecdpcdata$countryterritoryCode = factor(ecdpcdata$countryterritoryCode)
nzdata = ecdpcdata[ecdpcdata$countriesAndTerritories == "New Zealand", ]
# Cumulative count (dates are reverse order in dataset)
nzdata$TotalCases = rev(cumsum(rev(nzdata$cases)))
nzdata$TotalDeaths = rev(cumsum(rev(nzdata$deaths)))
# Gives warning if MoH count of cases does not match ECDPC
if (nzdata$TotalCases[1] != dim(confirmed)[1]) {
warning(paste("MoH says", dim(confirmed)[1], "confirmed cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
if (nzdata$TotalCases[1] != (dim(confirmed)[1] + dim(probable)[1])) {
warning(paste("MoH says", dim(confirmed)[1] + dim(probable)[1], "confirmed and probable cases, but ECDPC says", nzdata$TotalCases[1],
"(sometimes ECDPC lags behind NZ by 1 day)", sep = " "))
}
# Seems that ECDPC is now back to showing only confirmed cases for NZ
######
#
# Access official NZ Ministry of Health data (*** daily summaries ***)
nzurl = "https://www.health.govt.nz/our-work/diseases-and-conditions/covid-19-novel-coronavirus/covid-19-current-cases"
# extract NZ covid-19 case data from MoH website
webpage = read_html(nzurl)
# Get the confirmed cases
alltables = html_nodes(webpage, "table")
alltables = html_table(alltables)
dailytable = alltables[[1]]
#DHBtable = alltables[[2]] # not useful as includes "probable" cases
nconfirmed = as.numeric(dailytable[1, 2])
newconfirmed = as.numeric(dailytable[1, 3])
ndeaths = as.numeric(dailytable[6, 2])
# Gives error if new count is not consistent with old data
if (nconfirmed != dim(confirmed)[1]) {
stop("Confirmed case count does not equal saily summary table")
}
# Keep ongoing record of summary data
write.csv(dailytable, paste("MoH_",nzdate,".csv", sep = ""), quote = FALSE, row.names = FALSE)
#######
#
# Adjust to same format as for Shiny app
######## MANUAL DATA CORRECTION (10 patients recorded as 01/04/20, actually recorded in official figures as 31/03/20)
confirmed$Date.of.report[1:10] = as.Date("31/03/2020", format = "%d/%m/%Y")
# Firstly group by date, region and gender and put in date order
nzshinydata = confirmed %>% group_by(Date.of.report, Sex, DHB) %>%
summarise(ncase = length(Date.of.report)) %>%
mutate(country = "new zealand", ndeath = 0) %>%
select(date = Date.of.report, ncase, ndeath, gender = Sex, area = DHB, country) %>%
ungroup()
# Deaths need manual input
nzshinydata = nzshinydata %>% add_row(date = "2020-03-28", ncase = 0, ndeath = 1, gender = "female",
area = "West Coast", country = "new zealand") %>%
group_by(date, gender, area, country) %>%
summarise(ncase = sum(ncase), ndeath = sum(ndeath)) %>%
select(date, ncase, ndeath, gender, area, country) %>%
ungroup() %>% arrange(date, area, gender)
nzshinydata = data.frame(nzshinydata)
shinydata = read.csv("covid/coronaviz/data/corona_island.csv")
shinydata = data.frame(shinydata)
shinydata$date = as.Date(shinydata$date, format = "%d/%m/%Y")
shinydata$gender = as.character(shinydata$gender)
shinydata$area = as.character(shinydata$area)
shinydata$country = as.character(shinydata$country)
nzshinydata$gender = as.character(nzshinydata$gender)
nzshinydata$area = as.character(nzshinydata$area)
shinydata1 = rbind(shinydata, nzshinydata)
shinydata1$date = as.character(shinydata1$date, format = "%d/%m/%Y")
write.csv(shinydata1, "covid/coronaviz/data/corona_island_nz.csv", quote = FALSE, row.names = FALSE)
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz')
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
1347359+542868+194899+258058+142425
runApp('covid/coronaviz')
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
library(shiny); runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
?shinymobile
help(package="shinymobile")
help(package="shinyMobile")
selectInput("place", "Country to compare",
choices = unique(dataCountry()$country),
selected = "france",
multiple = FALSE)
runApp('covid/coronaviz/mobileapp.R')
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz')
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
library(shiny); runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
library(shiny); runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
shiny::runApp('covid/coronaviz')
runApp('covid/coronaviz')
runApp('covid/coronaviz/mobileapp.R')
runApp('covid/coronaviz/mobileapp.R')
library(shiny); runApp('covid/coronaviz/mobileapp.R')
